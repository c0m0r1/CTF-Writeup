
from z3 import *
import sys   
mangle_table = [[63, 57, 27, 31, 39, 62, 59, 12, 11, 49, 7, 9, 55, 37, 42, 51, 14, 39, 4, 35, 33, 56, 46, 28, 63, 40, 63, 48, 30, 61],
[62, 56, 26, 30, 38, 63, 58, 13, 10, 48, 6, 8, 54, 36, 43, 50, 15, 38, 5, 34, 32, 57, 47, 29, 62, 41, 62, 49, 31, 60],
[61, 59, 25, 29, 37, 60, 57, 14, 9, 51, 5, 11, 53, 39, 40, 49, 12, 37, 6, 33, 35, 58, 44, 30, 61, 42, 61, 50, 28, 63],
[60, 58, 24, 28, 36, 61, 56, 15, 8, 50, 4, 10, 52, 38, 41, 48, 13, 36, 7, 32, 34, 59, 45, 31, 60, 43, 60, 51, 29, 62],
[59, 61, 31, 27, 35, 58, 63, 8, 15, 53, 3, 13, 51, 33, 46, 55, 10, 35, 0, 39, 37, 60, 42, 24, 59, 44, 59, 52, 26, 57],
[58, 60, 30, 26, 34, 59, 62, 9, 14, 52, 2, 12, 50, 32, 47, 54, 11, 34, 1, 38, 36, 61, 43, 25, 58, 45, 58, 53, 27, 56],
[57, 63, 29, 25, 33, 56, 61, 10, 13, 55, 1, 15, 49, 35, 44, 53, 8, 33, 2, 37, 39, 62, 40, 26, 57, 46, 57, 54, 24, 59],
[56, 62, 28, 24, 32, 57, 60, 11, 12, 54, 0, 14, 48, 34, 45, 52, 9, 32, 3, 36, 38, 63, 41, 27, 56, 47, 56, 55, 25, 58],
[55, 49, 19, 23, 47, 54, 51, 4, 3, 57, 15, 1, 63, 45, 34, 59, 6, 47, 12, 43, 41, 48, 38, 20, 55, 32, 55, 56, 22, 53],
[54, 48, 18, 22, 46, 55, 50, 5, 2, 56, 14, 0, 62, 44, 35, 58, 7, 46, 13, 42, 40, 49, 39, 21, 54, 33, 54, 57, 23, 52],
[53, 51, 17, 21, 45, 52, 49, 6, 1, 59, 13, 3, 61, 47, 32, 57, 4, 45, 14, 41, 43, 50, 36, 22, 53, 34, 53, 58, 20, 55],
[52, 50, 16, 20, 44, 53, 48, 7, 0, 58, 12, 2, 60, 46, 33, 56, 5, 44, 15, 40, 42, 51, 37, 23, 52, 35, 52, 59, 21, 54],
[51, 53, 23, 19, 43, 50, 55, 0, 7, 61, 11, 5, 59, 41, 38, 63, 2, 43, 8, 47, 45, 52, 34, 16, 51, 36, 51, 60, 18, 49],
[50, 52, 22, 18, 42, 51, 54, 1, 6, 60, 10, 4, 58, 40, 39, 62, 3, 42, 9, 46, 44, 53, 35, 17, 50, 37, 50, 61, 19, 48],
[49, 55, 21, 17, 41, 48, 53, 2, 5, 63, 9, 7, 57, 43, 36, 61, 0, 41, 10, 45, 47, 54, 32, 18, 49, 38, 49, 62, 16, 51],
[48, 54, 20, 16, 40, 49, 52, 3, 4, 62, 8, 6, 56, 42, 37, 60, 1, 40, 11, 44, 46, 55, 33, 19, 48, 39, 48, 63, 17, 50],
[47, 41, 11, 15, 55, 46, 43, 28, 27, 33, 23, 25, 39, 53, 58, 35, 30, 55, 20, 51, 49, 40, 62, 12, 47, 56, 47, 32, 14, 45],
[46, 40, 10, 14, 54, 47, 42, 29, 26, 32, 22, 24, 38, 52, 59, 34, 31, 54, 21, 50, 48, 41, 63, 13, 46, 57, 46, 33, 15, 44],
[45, 43, 9, 13, 53, 44, 41, 30, 25, 35, 21, 27, 37, 55, 56, 33, 28, 53, 22, 49, 51, 42, 60, 14, 45, 58, 45, 34, 12, 47],
[44, 42, 8, 12, 52, 45, 40, 31, 24, 34, 20, 26, 36, 54, 57, 32, 29, 52, 23, 48, 50, 43, 61, 15, 44, 59, 44, 35, 13, 46],
[43, 45, 15, 11, 51, 42, 47, 24, 31, 37, 19, 29, 35, 49, 62, 39, 26, 51, 16, 55, 53, 44, 58, 8, 43, 60, 43, 36, 10, 41],
[42, 44, 14, 10, 50, 43, 46, 25, 30, 36, 18, 28, 34, 48, 63, 38, 27, 50, 17, 54, 52, 45, 59, 9, 42, 61, 42, 37, 11, 40],
[41, 47, 13, 9, 49, 40, 45, 26, 29, 39, 17, 31, 33, 51, 60, 37, 24, 49, 18, 53, 55, 46, 56, 10, 41, 62, 41, 38, 8, 43],
[40, 46, 12, 8, 48, 41, 44, 27, 28, 38, 16, 30, 32, 50, 61, 36, 25, 48, 19, 52, 54, 47, 57, 11, 40, 63, 40, 39, 9, 42],
[39, 33, 3, 7, 63, 38, 35, 20, 19, 41, 31, 17, 47, 61, 50, 43, 22, 63, 28, 59, 57, 32, 54, 4, 39, 48, 39, 40, 6, 37],
[38, 32, 2, 6, 62, 39, 34, 21, 18, 40, 30, 16, 46, 60, 51, 42, 23, 62, 29, 58, 56, 33, 55, 5, 38, 49, 38, 41, 7, 36],
[37, 35, 1, 5, 61, 36, 33, 22, 17, 43, 29, 19, 45, 63, 48, 41, 20, 61, 30, 57, 59, 34, 52, 6, 37, 50, 37, 42, 4, 39],
[36, 34, 0, 4, 60, 37, 32, 23, 16, 42, 28, 18, 44, 62, 49, 40, 21, 60, 31, 56, 58, 35, 53, 7, 36, 51, 36, 43, 5, 38],
[35, 37, 7, 3, 59, 34, 39, 16, 23, 45, 27, 21, 43, 57, 54, 47, 18, 59, 24, 63, 61, 36, 50, 0, 35, 52, 35, 44, 2, 33],
[34, 36, 6, 2, 58, 35, 38, 17, 22, 44, 26, 20, 42, 56, 55, 46, 19, 58, 25, 62, 60, 37, 51, 1, 34, 53, 34, 45, 3, 32],
[33, 39, 5, 1, 57, 32, 37, 18, 21, 47, 25, 23, 41, 59, 52, 45, 16, 57, 26, 61, 63, 38, 48, 2, 33, 54, 33, 46, 0, 35],
[32, 38, 4, 0, 56, 33, 36, 19, 20, 46, 24, 22, 40, 58, 53, 44, 17, 56, 27, 60, 62, 39, 49, 3, 32, 55, 32, 47, 1, 34],
[31, 25, 59, 63, 7, 30, 27, 44, 43, 17, 39, 41, 23, 5, 10, 19, 46, 7, 36, 3, 1, 24, 14, 60, 31, 8, 31, 16, 62, 29],
[30, 24, 58, 62, 6, 31, 26, 45, 42, 16, 38, 40, 22, 4, 11, 18, 47, 6, 37, 2, 0, 25, 15, 61, 30, 9, 30, 17, 63, 28],
[29, 27, 57, 61, 5, 28, 25, 46, 41, 19, 37, 43, 21, 7, 8, 17, 44, 5, 38, 1, 3, 26, 12, 62, 29, 10, 29, 18, 60, 31],
[28, 26, 56, 60, 4, 29, 24, 47, 40, 18, 36, 42, 20, 6, 9, 16, 45, 4, 39, 0, 2, 27, 13, 63, 28, 11, 28, 19, 61, 30],
[27, 29, 63, 59, 3, 26, 31, 40, 47, 21, 35, 45, 19, 1, 14, 23, 42, 3, 32, 7, 5, 28, 10, 56, 27, 12, 27, 20, 58, 25],
[26, 28, 62, 58, 2, 27, 30, 41, 46, 20, 34, 44, 18, 0, 15, 22, 43, 2, 33, 6, 4, 29, 11, 57, 26, 13, 26, 21, 59, 24],
[25, 31, 61, 57, 1, 24, 29, 42, 45, 23, 33, 47, 17, 3, 12, 21, 40, 1, 34, 5, 7, 30, 8, 58, 25, 14, 25, 22, 56, 27],
[24, 30, 60, 56, 0, 25, 28, 43, 44, 22, 32, 46, 16, 2, 13, 20, 41, 0, 35, 4, 6, 31, 9, 59, 24, 15, 24, 23, 57, 26],
[23, 17, 51, 55, 15, 22, 19, 36, 35, 25, 47, 33, 31, 13, 2, 27, 38, 15, 44, 11, 9, 16, 6, 52, 23, 0, 23, 24, 54, 21],
[22, 16, 50, 54, 14, 23, 18, 37, 34, 24, 46, 32, 30, 12, 3, 26, 39, 14, 45, 10, 8, 17, 7, 53, 22, 1, 22, 25, 55, 20],
[21, 19, 49, 53, 13, 20, 17, 38, 33, 27, 45, 35, 29, 15, 0, 25, 36, 13, 46, 9, 11, 18, 4, 54, 21, 2, 21, 26, 52, 23],
[20, 18, 48, 52, 12, 21, 16, 39, 32, 26, 44, 34, 28, 14, 1, 24, 37, 12, 47, 8, 10, 19, 5, 55, 20, 3, 20, 27, 53, 22],
[19, 21, 55, 51, 11, 18, 23, 32, 39, 29, 43, 37, 27, 9, 6, 31, 34, 11, 40, 15, 13, 20, 2, 48, 19, 4, 19, 28, 50, 17],
[18, 20, 54, 50, 10, 19, 22, 33, 38, 28, 42, 36, 26, 8, 7, 30, 35, 10, 41, 14, 12, 21, 3, 49, 18, 5, 18, 29, 51, 16],
[17, 23, 53, 49, 9, 16, 21, 34, 37, 31, 41, 39, 25, 11, 4, 29, 32, 9, 42, 13, 15, 22, 0, 50, 17, 6, 17, 30, 48, 19],
[16, 22, 52, 48, 8, 17, 20, 35, 36, 30, 40, 38, 24, 10, 5, 28, 33, 8, 43, 12, 14, 23, 1, 51, 16, 7, 16, 31, 49, 18],
[15, 9, 43, 47, 23, 14, 11, 60, 59, 1, 55, 57, 7, 21, 26, 3, 62, 23, 52, 19, 17, 8, 30, 44, 15, 24, 15, 0, 46, 13],
[14, 8, 42, 46, 22, 15, 10, 61, 58, 0, 54, 56, 6, 20, 27, 2, 63, 22, 53, 18, 16, 9, 31, 45, 14, 25, 14, 1, 47, 12],
[13, 11, 41, 45, 21, 12, 9, 62, 57, 3, 53, 59, 5, 23, 24, 1, 60, 21, 54, 17, 19, 10, 28, 46, 13, 26, 13, 2, 44, 15],
[12, 10, 40, 44, 20, 13, 8, 63, 56, 2, 52, 58, 4, 22, 25, 0, 61, 20, 55, 16, 18, 11, 29, 47, 12, 27, 12, 3, 45, 14],
[11, 13, 47, 43, 19, 10, 15, 56, 63, 5, 51, 61, 3, 17, 30, 7, 58, 19, 48, 23, 21, 12, 26, 40, 11, 28, 11, 4, 42, 9],
[10, 12, 46, 42, 18, 11, 14, 57, 62, 4, 50, 60, 2, 16, 31, 6, 59, 18, 49, 22, 20, 13, 27, 41, 10, 29, 10, 5, 43, 8],
[9, 15, 45, 41, 17, 8, 13, 58, 61, 7, 49, 63, 1, 19, 28, 5, 56, 17, 50, 21, 23, 14, 24, 42, 9, 30, 9, 6, 40, 11],
[8, 14, 44, 40, 16, 9, 12, 59, 60, 6, 48, 62, 0, 18, 29, 4, 57, 16, 51, 20, 22, 15, 25, 43, 8, 31, 8, 7, 41, 10],
[7, 1, 35, 39, 31, 6, 3, 52, 51, 9, 63, 49, 15, 29, 18, 11, 54, 31, 60, 27, 25, 0, 22, 36, 7, 16, 7, 8, 38, 5],
[6, 0, 34, 38, 30, 7, 2, 53, 50, 8, 62, 48, 14, 28, 19, 10, 55, 30, 61, 26, 24, 1, 23, 37, 6, 17, 6, 9, 39, 4],
[5, 3, 33, 37, 29, 4, 1, 54, 49, 11, 61, 51, 13, 31, 16, 9, 52, 29, 62, 25, 27, 2, 20, 38, 5, 18, 5, 10, 36, 7],
[4, 2, 32, 36, 28, 5, 0, 55, 48, 10, 60, 50, 12, 30, 17, 8, 53, 28, 63, 24, 26, 3, 21, 39, 4, 19, 4, 11, 37, 6],
[3, 5, 39, 35, 27, 2, 7, 48, 55, 13, 59, 53, 11, 25, 22, 15, 50, 27, 56, 31, 29, 4, 18, 32, 3, 20, 3, 12, 34, 1],
[2, 4, 38, 34, 26, 3, 6, 49, 54, 12, 58, 52, 10, 24, 23, 14, 51, 26, 57, 30, 28, 5, 19, 33, 2, 21, 2, 13, 35, 0],
[1, 7, 37, 33, 25, 0, 5, 50, 53, 15, 57, 55, 9, 27, 20, 13, 48, 25, 58, 29, 31, 6, 16, 34, 1, 22, 1, 14, 32, 3],
[0, 6, 36, 32, 24, 1, 4, 51, 52, 14, 56, 54, 8, 26, 21, 12, 49, 24, 59, 28, 30, 7, 17, 35, 0, 23, 0, 15, 33, 2]]


def unmangle(val, index):
    for i in range(len(mangle_table)):
        if mangle_table[i][index] == val:
            return i
    print("unmangle error %d %d"%(val, index))
    exit(1)

UINT_MAX = 4294967295

def DecodeBase64Bytewise(arg):
	if (arg + 208) % 256 <= 9:
		return arg - 48
	if (arg + 191) % 256 <= 25:
		return arg - 55
	if (arg + 159) % 256 <= 25:
		return arg - 61
	if arg == 123:
		return 62
	return 63 if arg == 125 else -1

def checksum(st):
    num = 16
    for i in range(len(st)):
        #print("%d -> %d"%(i, num))
        if i != len(st) - 2:
            num = st[i] + num
            #print("add -> %d"%num)
            if i % 2 == 0:
                num = st[i] + num
                #print("2 -> %d"%num)
            if i % 3 == 0:
                num = st[i] * -2 + num
                #print("3 -> %d"%num)
            if i % 5 == 0: 
                num = st[i] * -3 + num
                #print("5 -> %d"%num)
            if i % 7 == 0:
                num = st[i] * 4 + num
                #print("7 -> %d"%num)
    return num

def rot(c, r):
    c = -c + r
    if c < 0:
        c += 64
    return c

"""
flag = "uy4Qo8z/nch5vpqkdot4zKQWn13W88"

if len(flag) != 30 : 
    print("wrong flag length")
    exit(1)

flag_list = [DecodeBase64Bytewise(ord(x)) for x in flag]
#print(li)

for x in flag_list:
    if x > 63: 
        print("invalid char")
        exit(1)

filter_list = [18,43,47,5,35,44,59,17,3,21,6,43,44,37,26,42,24,34,57,14,30,5,16,23,37,49,48,16,28,49]
for i in range(len(flag_list)):
    flag_list[i] = filter_list[i % len(filter_list)] ^ flag_list[i]

num = 16
for i in range(len(flag_list)):
    if i != len(flag_list) - 2:
        num = (flag_list[i] + num) & UINT_MAX
        if i % 2 == 0:
            num = (flag_list[i] + num) & UINT_MAX
        if i % 3 == 0:
            num = (flag_list[i] * 4294967294 + num) & UINT_MAX
            #num = (flag_list[i] * -1 + num) & UINT_MAX
        if i % 5 == 0: 
            num = (flag_list[i] * 4294967293 + num) & UINT_MAX
            #num = (flag_list[i] * -2 + num) & UINT_MAX
        if i % 7 == 0:
            num = (flag_list[i] * 4 + num) & UINT_MAX

if flag_list[-1] != num:
    print("invalid flag checksum")
    exit(1)

for i in range(len(flag_list)):
    for j in range(len(flag_list)):
        if flag_list[i] == flag_list[j]:
            print("invalid flag")
            exit(1)
"""
#print(checksum([48, 25, 23, 31, 12, 22, 11, 46, 36, 9, 39, 15, 3, 10, 49, 18, 19, 8, 33, 50, 45, 58, 2, 4, 5, 6, 7, 0, 1, 13]))

iv = IntVector('iv', 30)

s = Solver()
s.add([And(i >= 0, i < 64) for i in iv])

for i in range(30):
    for j in range(30):
        if i != j:
            s.add(iv[i] != iv[j])


num = 16
for i in range(30):
    if i != 30 - 2:
        num = iv[i] + num
        if i % 2 == 0:
            num = iv[i] + num
        if i % 3 == 0:
            num = iv[i] * -2 + num
        if i % 5 == 0: 
            num = iv[i] * -3 + num
        if i % 7 == 0:
            num = iv[i] * 4 + num

s.add(num % 64 == iv[28])

s.add(iv[1] == 25)
s.add(iv[2] == 23)
s.add(iv[9] == 9)
s.add(iv[20] == 45)
s.add(iv[26] == 7)
s.add(iv[8] >= 15)
s.add(iv[12] <= 4)
s.add(iv[14] >= 48)
s.add(iv[29] >= 1)
s.add((iv[0]+iv[1]+iv[2]+iv[3]+iv[4]) <= 140)
s.add((iv[0]+iv[1]+iv[2]+iv[3]+iv[4]) >= 130)
s.add(iv[5]+iv[6]+iv[7]+iv[8]+iv[9] <= 150)
s.add((iv[5]+iv[6]+iv[7]+iv[8]+iv[9]) >= 140)
s.add((iv[10]+iv[11]+iv[12]+iv[13]+iv[14]) <= 160)
s.add((iv[10]+iv[11]+iv[12]+iv[13]+iv[14]) >= 150)
s.add((iv[15]+iv[16]+iv[17]+iv[18]+iv[19]) <= 170)
s.add((iv[15]+iv[16]+iv[17]+iv[18]+iv[19]) >= 160)
s.add((iv[20]+iv[21]+iv[22]+iv[23]+iv[24]) <= 180)
s.add((iv[20]+iv[21]+iv[22]+iv[23]+iv[24]) >= 170)
s.add(iv[0]+iv[5]+iv[10]+iv[15]+iv[20]+iv[25] <= 178)
#s.add(iv[0]+iv[5]+iv[10]+iv[15]+iv[20]+iv[25] >= 172)
s.add(iv[1]+iv[6]+iv[11]+iv[16]+iv[21]+iv[26] <= 168)
#s.add(iv[1]+iv[6]+iv[11]+iv[16]+iv[21]+iv[26] >= 162)
s.add(iv[2]+iv[7]+iv[12]+iv[17]+iv[22]+iv[27] <= 158)
#s.add(iv[2]+iv[7]+iv[12]+iv[17]+iv[22]+iv[27] >= 152)
s.add(iv[3]+iv[8]+iv[13]+iv[18]+iv[23] <= 148)
#s.add(iv[3]+iv[8]+iv[13]+iv[18]+iv[23] >= 142)
s.add(iv[4]+iv[9]+iv[14]+iv[19]+iv[24]+iv[29] <= 138)
#s.add(iv[4]+iv[9]+iv[14]+iv[19]+iv[24]+iv[29] >= 132)
s.add(((iv[7] + iv[27] * 3) * 3 - iv[5] * 13) <= 85)
s.add((iv[22] * 3 + iv[14] * 4 - iv[20] * 5) <= 82)
s.add(((iv[14] + iv[16] * 2) * 2 + (iv[15] - iv[18] * 2) * 3  - iv[17] * 5 + iv[13]) == 0)
s.add(iv[5] == iv[6] * 2)
s.add(iv[29] + iv[7] == 59)
s.add(iv[0] == iv[17] * 6)
s.add(iv[8] == iv[9] * 4)
s.add(iv[11] * 2 == iv[13] * 3)
s.add(iv[13] + iv[29] + iv[11] + iv[4] == iv[19])
s.add(iv[10] == iv[12] * 13)

print(s.check())
#if str(s.check()) == "unsat":
#    exit(1)
m = s.model()

trans_table = {}
char_table = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}"
for c in char_table:
    trans_table[DecodeBase64Bytewise(ord(c))] = c

result_list = []

for x in iv:
    result_list.append(int(str(m[x])))

shuffle_list = [3, 19, 0, 24, 2, 10, 12, 20, 18, 15, 11, 6, 1, 25, 27, 7, 16, 22, 26, 13, 14, 4, 5, 8, 17, 23, 21, 9, 28, 29]
"""
for i in range(30):
    reshuffle_list[shuffle_list[i]] = i
print(reshuffle_list)
"""
reshuffle_list = [2, 12, 4, 0, 21, 22, 11, 15, 23, 27, 5, 10, 6, 19, 20, 9, 16, 24, 8, 1, 7, 26, 17, 25, 3, 13, 18, 14, 28, 29]

"""
#flag mangling
flag = "HsNTtfrdXSFVudZH}Tif3kztEZxNbc"
mangle_list = [0 for _ in range(30)]
for i in range(len(shuffle_list)):
    mangle_list[shuffle_list[i]] = mangle_table[DecodeBase64Bytewise(ord(flag[i]))][shuffle_list[i]]
print([hex(c) for c in mangle_list])
"""
#flag demangling

print(result_list)
flag_list = [0 for _ in range(30)]
for i in range(len(shuffle_list)):
    flag_list[reshuffle_list[i]] = unmangle(result_list[i], i)

print(flag_list)

for x in flag_list:
    print(char_table[x], end="")
print()


#ans_list = [0 for _ in range(30)]
#ans_list[1] = 25
#ans_list[2] = 23
#ans_list[9] = 9
#ans_list[20] = 45
#ans_list[26] = 7
